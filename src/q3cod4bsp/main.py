import os
import re
import glob
import shutil
import subprocess

from pathlib import Path

PRINT_Q3BSP_Q3MAP = """
#####################################
           Q3BSP => Q3MAP
#####################################
"""

PRINT_Q3MAP_COD4MAP = """
#####################################
          Q3MAP => COD4MAP
#####################################
"""

MAP_HEADER = """iwmap 4
"000_Global" flags  active
"The Map" flags"""


def q3map2(filepath: str):
    """
    Use q3map2.exe to convert a Q3 BSP to a Q3 MAP.
    """
    filename = Path(filepath).stem
    binary = Path("bin") / "q3map2.exe"
    output = Path("out") / f"{filename}.map"

    subprocess.run(
        [binary, "-convert", "-format", "map", "-map", filepath, "-game", "quake3"],
        check=True,
    )
    if not os.path.exists("out"):
        os.mkdir("out")

    filepath = Path("bsp") / f"{filename}_converted.map"
    if os.path.isfile(filepath):
        shutil.move(filepath, output)


def cod4map2(filepath: str):
    """
    Convert a Q3 MAP to a CoD4 MAP.
    """
    with open(filepath, "r+", encoding="utf8") as map_file:
        print(f"Converting {Path(filepath).stem}")
        content = map_file.read().replace(
            "// Generated by Q3Map2 (ydnar) -convert -format map", ""
        )
        map_file.seek(0)
        print(">> Write header")
        map_file.write(MAP_HEADER)
        print(">> Remove patchdefs")
        content = re.sub(r"\t// patch.*?\n\t}", "", content, flags=re.DOTALL)
        print(">> Rewrite materials")
        content = re.sub(r"(?=\b\D\D\D\b).*/\b", " ) ", content)
        print(">> Rewrite UVs")
        content = content.replace(
            "0 0 0 0.5 0.5 0 0 0", "256 256 0 0 0 0 lightmap_gray 35840 35840 0 0 0 0"
        )
        map_file.write(content)
        map_file.truncate()
    print(">> Generate GDT & Batch")
    make_gdt(filepath)
    print()


def make_gdt(filepath: str):
    """
    Generate a GDT containing all materials from the map with a default configuration,
    and generate a BAT file to compile them quickly with the CoD4 SDK.
    """
    common_tools = [
        "alpha_0",
        "alpha_100",
        "alpha_25",
        "alpha_50",
        "alpha_75",
        "antiportal",
        "areaportal",
        "botclip",
        "caulk",
        "clip",
        "clusterportal",
        "cushion",
        "donotenter",
        "full_clip",
        "hint",
        "hintlocal",
        "invisible",
        "lavacaulk",
        "lightgrid",
        "metalclip",
        "mirror1",
        "missileclip",
        "nodraw",
        "nodrawnonsolid",
        "nodrop",
        "nolightmap",
        "origin",
        "qer_mirror",
        "qer_portal",
        "skip",
        "slick",
        "slimecaulk",
        "terrain",
        "trigger",
        "watercaulk",
        "weapclip",
        "white",
    ]
    filename = Path(filepath).stem
    template_path = Path("assets") / "gdt.template"
    gdt_path = Path("out") / f"{filename}.gdt"
    bat_path = Path("out") / f"{filename}.bat"

    template = ""
    with open(template_path, "r", encoding="utf8") as template_file:
        template = template_file.read()

    materials = []
    with open(filepath, "r", encoding="utf8") as map_file:
        materials = list(set(re.findall(r"\)(?!.*\))(?:(?!256).)*", map_file.read())))
        materials = map(lambda m: re.sub(r"[^\w\s-]", "", m).strip().lower(), materials)
        materials = filter(lambda m: m and m not in common_tools, materials)

    with open(gdt_path, "w", encoding="utf8") as gdt_file, open(
        bat_path, "w", encoding="utf8"
    ) as bat_file:
        bat_file.write("@ECHO OFF\n\n")
        gdt_file.write("{\n")
        for mtl in materials:
            bat_file.write(f"converter -nocachedownload -single material {mtl}\n")
            gdt_file.write(template % (mtl, mtl))
        bat_file.write("\npause\n")
        gdt_file.write("}\n")


def main():
    """
    Entry point of the program.
    """
    folder = Path("bsp")
    if not os.path.exists(folder):
        os.mkdir(folder)

    if not any(f.suffix == ".bsp" for f in folder.iterdir() if f.is_file()):
        print("The folder does not contain any .bsp files")
        return

    print(PRINT_Q3BSP_Q3MAP)
    for bsp_file in glob.glob(str(Path("bsp") / "*.bsp")):
        q3map2(bsp_file)

    print(PRINT_Q3MAP_COD4MAP)
    for map_file in glob.glob(str(Path("out") / "*.map")):
        cod4map2(map_file)
